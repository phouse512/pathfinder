{
  "django": {
    "id": 1,
    "title": "Django - from start to finish",
    "description": "This track will take you through the process of creating, deploying, and managing your django web application. The track will be sized into sections based on building, deploying, and managing your project.",
    "stages": [
      {
        "title": "building your web application",
        "nodes": [
          {
            "title": "managing your python environment",
            "description": "Setting up a new virtual environment is very important in order to keep your dependencies list clean and manageable. These resources will help you initialize a new virtualenv and install the necessary dependencies to set up a Django application."
          },
          {
            "title": "initializing a django application",
            "description": "It's time to start your Django application! This node will get the framework setup so you can begin development."
          },
          {
            "title": "setting up a postgres database",
            "description": "By default, Django sets up a sqlite database for ease-of-use, but this quickly becomes clunky and unusable for production applications. This will help you setup a Postgres database and connect it to your Django app."
          },
          {
            "title": "understanding Django views",
            "description": "It's time to start building a basic view that you can go visit in your browser. This is the starting point for building complex web applications."
          },
          {
            "title": "using Django models",
            "description": "Django models are the interface between your Django application and the database you previously connected. Using a persistent data-store for your application is the next step to building dynamic experiences."
          },
          {
            "title": "unit-testing your application",
            "description": "In order to increase the maintainability of your application in the future, especially when refactoring in the future."
          }
        ]
      },
      {
        "title": "hosting and deploying your web application",
        "nodes": [
          {
            "title": "instantiating a server",
            "description": "Now that the application is running locally, it's time to  set up a remote server so that your server can be deployed."
          },
          {
            "title": "running Django with gunicorn and upstart",
            "description": "To make sure that our server is always running, we'll use linux's upstart services to always keep it up. The test webserver, wsgi that comes with Django is also not suitable for production, so we'll use gunicorn to handle this."
          },
          {
            "title": "setting up nginx",
            "description": "Now that our server is up and running, it's time to make sure that the server is accessible by the default port 80 from the outside world."
          },
          {
            "title": "configuring a domain name",
            "description": "Although you can access your web application from the ip address of your linux box, real-world applications use human-readable domains to provide a lasting impression."
          }
        ]
      },
      {
        "title": "managing your django application",
        "nodes": [
          {
            "title": "the importance of logging",
            "description": "While your server is running, it's important to be able to understand what's going on. Logging allows for you to debug and see exactly how your application is acting"
          },
          {
            "title": "using graphite for metrics",
            "description": "While logs are useful for in-depth information, metrics dashboards allow for you to easily see at a glance the status of your service."
          }
        ]
      }
    ]
  }
}

